{$DEFINE SRL_INTEGERARRAY_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL/utils.simba}
{$ENDIF}

(*
TIntegerArray
=============
TIntegerArray related methods
*)

function TIntegerArray.Combine(Other: TIntegerArray): TIntegerArray; 
begin
  SetLength(Result, Length(Self) + Length(Other));
  if Length(self) > 0 then
    MemMove(self[0], result[0], Length(self)*SizeOf(self[0]));
  if Length(Other) > 0 then
    MemMove(Other[0], result[Length(Self)], Length(Other)*SizeOf(Other[0]));
end;

function TIntegerArray.Equals(Other:TIntegerArray): Boolean; 
begin
  if (Length(Self) <> Length(Other)) then Exit(False);
  if (Length(Self) = 0) then Exit(True);
  Result := CompareMem(Self[0], Other[0], Length(Self)*SizeOf(self[0]));
end;

procedure TIntegerArray.SortFrom(X: Int32);
var
  I, L: Int32;
  Weights: TIntegerArray;
begin
  L := High(Self);
  if (L <= 0) then Exit;
  SetLength(Weights, L + 1);
  for i := 0 To L do Weights[i] := Round(Abs(X - Self[i]));
  Self.Sort(Weights, True);
end;

function TIntegerArray.UniqueCount: Int32; 
var
  Arr: TIntegerArray;
begin
  Arr := Copy(Self);
  ClearSameIntegers(Arr);
  Result := Length(Arr);
end;

procedure TIntegerArray.ClearDuplicates;
begin
  ClearSameIntegers(Self);
end;

operator in(Left: Int32; constref Right: TIntegerArray): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Right) do
    if Right[i] = Left then
      Exit(True);
end;

operator in(Left: Double; constref Right: TIntegerArray): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Right) do
    if Right[i] = Round(Left) then
      Exit(True);
end;

function T2DIntegerArray.Combine(Other: T2DIntegerArray): T2DIntegerArray; 
begin
  SetLength(Result, Length(Self) + Length(Other));
  if Length(self) > 0 then
    MemMove(self[0], result[0], Length(self)*SizeOf(self[0]));
  if Length(Other) > 0 then
    MemMove(Other[0], result[Length(Self)], Length(Other)*SizeOf(Other[0]));
end;

function T2DIntegerArray.Equals(Other:T2DIntegerArray): Boolean;
var i:Int32;
begin
  if (Length(Self) <> Length(Other)) then Exit(False);
  if (Length(Self) = 0) then Exit(True);

  for i:=0 to High(self) do
    if not self[i].Equals(Other[i]) then
      Exit(False);
  Result := True;
end;

function T2DIntegerArray.Merge(): TIntegerArray; 
var i:Int32;
begin
  for i:=0 to High(self) do
    Result.Extend(self[i]);
end;
